# -*- coding: utf-8 -*-
"""Projeto_DesafioFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VKcaKOqrIxvrhdA_w9QnH7eE1p0kYc6e

# **Atividades**
* 1. Leitura de arquivos
* 2. Tratamento de dados
  * 2.1. Renomear colunas
  * 2.2. Verificar tipos
  * 2.3. Deletar dados
* 3. Concatenar Tabelas
* 4. Correlação de Tabelas
* 5. Regra de Negócio
* 6. Exportar Dados

Ojetivo: Através da manipulação dos dados, preparar e tratar os dados dos conjunto de dados de vendas e detalhamento. Para gerar uma unica base de dados, que irá servir como relatório, indicador.

# **Importar biblioteca**
"""

import pandas as pd

"""# **Leitura de arquivos**

# Arquivos CSV
"""

df_vendas = pd.read_csv('vendas.csv', sep ='|')

"""# Arquivos XLSX"""

df_detalhamentoAM = pd.read_excel('detalhamento.xlsx', sheet_name='AM', skiprows=1 )
df_detalhamentoRR = pd.read_excel('detalhamento.xlsx', sheet_name='RR', skiprows=1 )
df_detalhamentoRO = pd.read_excel('detalhamento.xlsx', sheet_name='RO', skiprows=1 )
df_detalhamentoAC = pd.read_excel('detalhamento.xlsx', sheet_name='AC', skiprows=1 )

"""# **Tratamento de Dados**

## Renomeando colunas
"""

df_vendas.columns = ['escritorio', 'operadora', 'material', 'data', 'valor_liquido']
df_vendas.head(3)

df_detalhamentoAM.columns = ['loja', 'escritorio', 'uf', 'operadora', 'valor_bruto']
df_detalhamentoAM.head(3)

df_detalhamentoRR.columns = ['loja', 'escritorio', 'uf', 'operadora', 'valor_bruto']
df_detalhamentoRR.head(3)

df_detalhamentoRO.columns = ['loja', 'escritorio', 'uf', 'operadora', 'valor_bruto']
df_detalhamentoRO.head(3)

df_detalhamentoAC.columns = ['loja', 'escritorio', 'uf', 'operadora', 'valor_bruto']
df_detalhamentoAC.head(3)

"""## Verificar tipos de dados

### Verificar tipos
"""

df_vendas.dtypes

df_detalhamentoAM.dtypes

df_detalhamentoRR.dtypes

df_detalhamentoRO.dtypes

df_detalhamentoAC.dtypes

"""### Alterando tipo de uma coluna"""

df_vendas['valor_liquido'] = df_vendas['valor_liquido'].astype(int)

"""## Deletar dados"""

df_vendas = df_vendas[['escritorio', 'operadora', 'valor_liquido']].copy()

df_detalhamentoAM = df_detalhamentoAM[['loja', 'escritorio', 'operadora', 'valor_bruto']].copy()
df_detalhamentoRR = df_detalhamentoRR[['loja', 'escritorio', 'operadora', 'valor_bruto']].copy()
df_detalhamentoRO = df_detalhamentoRO[['loja', 'escritorio', 'operadora', 'valor_bruto']].copy()
df_detalhamentoAC = df_detalhamentoAC[['loja', 'escritorio', 'operadora', 'valor_bruto']].copy()

"""# Concatenar tabelas (Juntar tabelas)"""

print('Amazonas(AM): ')
print(f'Linhas: {df_detalhamentoAM.shape[0]}')
print(f'Colunas {df_detalhamentoAM.shape[1]}')

print('Roraima(RR): ')
print(f'Linhas: {df_detalhamentoRR.shape[0]}')
print(f'Colunas {df_detalhamentoRR.shape[1]}')

print('Rondônia(RO): ')
print(f'Linhas: {df_detalhamentoRO.shape[0]}')
print(f'Colunas {df_detalhamentoRO.shape[1]}')

print('Acre(AC): ')
print(f'Linhas: {df_detalhamentoAC.shape[0]}')
print(f'Colunas {df_detalhamentoAC.shape[1]}')

"""Agora vamos unificar todos esses conjuntos de dados em um único DF"""

df_detalhamento = pd.concat([df_detalhamentoAM,df_detalhamentoRR, df_detalhamentoRO, df_detalhamentoAC])

df_detalhamento = df_detalhamento.reset_index(drop=True)
df_detalhamento

"""# **Correlação de Tabelas**

## Agrupamento de dados
"""

df_vendas = df_vendas.groupby(['operadora', 'escritorio']).agg({'valor_liquido':'sum'})
df_vendas.sort_values(ascending=False, by='valor_liquido').reset_index()

df_detalhamento = df_detalhamento.groupby(['loja', 'operadora', 'escritorio']).agg({'valor_bruto':'sum'}).reset_index()
df_detalhamento.sort_values(ascending=False, by='valor_bruto').reset_index()

"""## Merge de tabelas"""

df_relatorio = pd.merge(df_detalhamento, df_vendas, on=['operadora', 'escritorio'], how='right')

df_relatorio.head(5)

"""### Tratando o pós merge

Na minha análise não encontrei valores faltantes. Mas mesmo assim vou utilizar o fillna para substituir os mesmos por 0 se houver.
"""

df_relatorio = df_relatorio.fillna(0)

"""# **Regra de Negócio**"""

def status(valor_liquido, valor_bruto):
  if (valor_liquido != valor_bruto):
    return 'alerta'
  else:
    return ''

df_relatorio['status'] = df_relatorio.apply(lambda row: status(row['valor_liquido'], row['valor_bruto']), axis='columns')

df_relatorio

"""# **Exportanto Dados**"""

writer = pd.ExcelWriter('Relatório final.xlsx')

df_relatorio.to_excel(writer, sheet_name='relatorio', index=False)

writer.save()